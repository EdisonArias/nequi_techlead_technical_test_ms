name: Build, Test, Dockerize & Push to ECR

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-east-1
      ECR_REPO: nequi-techlead-app
      ECS_CLUSTER: nequi-techlead-cluster
      ECS_SERVICE: nequi-techlead-svc
      JAR_PATH: applications/app-service/build/libs/nequi_techlead_technical_test_ms.jar

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build JAR
        run: ./gradlew clean test bootJar

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO" || \
          aws ecr create-repository --repository-name "$ECR_REPO" >/dev/null

      - name: Set Docker tags
        id: meta
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "image_uri=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (multi-arch)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -f deployment/Dockerfile \
            --build-arg JAR_PATH=${{ env.JAR_PATH }} \
            -t ${{ steps.meta.outputs.image_uri }}:${{ steps.meta.outputs.sha_tag }} \
            -t ${{ steps.meta.outputs.image_uri }}:latest \
            --push .

      - name: Force ECS new deployment
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --force-new-deployment
